version: '3.8'

services:
  # API Gateway - Main entry point
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PRICING_SERVICE_URL=http://pricing-service:3004
      - CRM_SERVICE_URL=http://crm-service:3002
      - MAPS_SERVICE_URL=http://maps-service:3003
      - SOCIAL_MARKETING_SERVICE_URL=http://social-marketing-service:3007
    depends_on:
      - auth-service
      - pricing-service
      - social-marketing-service
    networks:
      - fence-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Authentication Service with Facebook OAuth
  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - JWT_SECRET=development-jwt-secret
      - SESSION_SECRET=development-session-secret
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - FACEBOOK_CALLBACK_URL=http://localhost:3001/auth/facebook/callback
      - FRONTEND_URL=http://localhost:3000
    networks:
      - fence-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Pricing and ROI Service
  pricing-service:
    build:
      context: ./microservices/pricing-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
    networks:
      - fence-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Social Marketing Automation Service
  social-marketing-service:
    build:
      context: ./microservices/social-marketing-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AUTH_SERVICE_URL=http://auth-service:3001
    depends_on:
      - auth-service
    networks:
      - fence-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3007/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL Database (optional for development)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=fence_user
      - POSTGRES_PASSWORD=fence_pass
      - POSTGRES_DB=fence_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fence_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional for session storage)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - fence-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  fence-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: